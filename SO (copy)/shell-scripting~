Extension: 
	.sh (mostly)
	
The first line of any script is a special comment that indicates its target shell.

#!/bin/bash

Variables:
	<variable>=<value>
	no spaces, otherwise it'll be considered a command
	varaibles are not type defined
	to access a variable: $<variable>
	$0-$9 - Access each argument individually
	$* - Access all arguments
	$# - Get the total number of arguments

Conditions:
	if <condition> then
		<...>
	elif <condition> then
		<...>
	else
		<...>
	fi
	
	Comparisons are defined inside [...]
	Execution of commands in a subshell is defined inside (...), if the commands are outside of ( ) they are not executed on a subshell. Subshell: the condition is based on the exit code of the commmands considering zero as true.
	Arithmetic operations are defined inside ((...)), true == non-zero result; not standard type, supported by bash.
	For checking if a string matches a regular expression are defined [[...]]; also not standard, supported by bash.
	
	Case Statements:
		case <variable> in
			<value1>) <...>
				;;
			<value2>) <...>
				;;
			<valueN>) <...>
				;;
			*) 		<...>		#default case
				;;

	In order to perform the comparisons with numeric variables, strings and files, different operators are required. <num1> <op> <num2>
	-eq - equal
	-ne - not equal
	-lt - less than
	-le - less than or equal
	-gt - greater than
	-ge - greater than or equal
	The tradicional operators ( <, >, =, !=) can only be used inside ((...))
	
	File operators: 	#defined before the path to a specific file; <op> <file>
	-e - exists
	-f - is a regular file (not a directory)
	-d - is a directory
	-r - has read permissions
	-w - has write permissions
	-x - has execute permissions
	
Loops:
	while <condition>
	do
		<...>
	done
	
	for <variable> in <list>		# iterates over a list of values (list can mix types of data)
	do
		<...>
	done
	
	for ((exp1; exp2; exp3))		# traditional, incrementing variable between a start and end
	do
		<...>
	done

Subshell:
	Executing commands in subshells (child proccesses of the current one) is often used to obtain their output on the script like the return of a function.
	<variable>=$(<commands>)
	
Echo:
	Allows for interaction with the user. Echo is used to write something on the shell.
	-e used to allow the support of backslash-escaped charecters.
	In order to ask information through the shell:
	read <variable>	#Stores the inputted string; varaible does not need to be declared.

